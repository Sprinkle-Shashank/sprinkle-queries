with table1 as (select
				substring(table_54646.projcode_factory,1,1) as code,
				reverse(SPLIT_PART(reverse(table_54646.projcode_factory), '-',1)) as code_brand,
				JSON_SERIALIZE(table_52810.pace_brands) as pace_brand,	
				case when pace_brand like '%1011796%' then 1 else 0 end  as brand,
				--table_52810.start_date,
				p.module_name as select_modules1,
				table_4227.start_date as start_date1,		
				case when num_enrolled_class = 0 then null else (cast(attendance as float)/cast(num_enrolled_class as float)) end as avg_attendance,
				case when table_52810.offset_date is null then '2020-02-01T00:00:00.000Z' else table_52810.offset_date end as offset_date, 
				p._id as id1,attendance, num_enrolled_class,
				p.projectId as projectid1


			from profile_4228 p
inner join profile_54646 table_54646 on
table_54646.projectId = p.projectId

inner join profile_52810 table_52810 on
table_52810.projectId = p.projectId	
				
inner join profile_4227 table_4227 on
table_4227._id = p.class 
				

), 

table2 as (select brand,case when start_date1 >= offset_date then 1 else 0 end as token,select_modules1, avg(avg_attendance) as total_avg_attendance,
		   moduleTable.name as module ,attendance,num_enrolled_class,id1,start_date1,projectid1,code

			from table1 p
		   
left join ds_mysql_prod_tagelement moduleTable on
moduleTable.Id = select_modules1
		   
group by brand,token,select_modules,module,moduleTable.sortOrder,attendance,num_enrolled_class,id1,start_date,projectid1,code
order by moduleTable.sortOrder
)


select total_avg_attendance,select_modules1 as select_modules,module,start_date1 as start_date,projectid1 as projectid, code from table2 p where brand = 1 and token = 1